# Generated by Django 3.1.14 on 2022-07-07 01:00

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import netmanga_website.apps.accounts.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('image', models.ImageField(blank=True, upload_to='awards/')),
                ('price', models.IntegerField(default=0)),
                ('fiat_reward', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('coins_reward', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published', models.DateField(default=django.utils.timezone.now)),
                ('title', models.CharField(max_length=100)),
                ('no', models.IntegerField(null=True)),
                ('views', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=500)),
                ('like', models.IntegerField(default=0)),
                ('dislike', models.IntegerField(default=0)),
                ('chapter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.chapter')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CoinOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('bonus', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Creator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_profile_picture_displayed', models.BooleanField(default=True)),
                ('mangas_published', models.IntegerField(default=0)),
                ('chapters_published', models.IntegerField(default=0)),
                ('total_readers', models.IntegerField(default=0)),
                ('total_likes', models.IntegerField(default=0)),
                ('total_dislikes', models.IntegerField(default=0)),
                ('subscribers', models.IntegerField(default=0)),
                ('earned_money', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MangaSeries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('cover_picture', models.ImageField(blank=True, upload_to='coverpictures/')),
                ('plot', models.CharField(max_length=1000)),
                ('primary_Genre', models.CharField(blank=True, choices=[('Select', 'Select'), ('Action', 'Action'), ('Drama', 'Drama'), ('Comedy', 'Comedy'), ('Fantasy', 'Fantasy'), ('Slice of Life', 'Slice of Life'), ('Romance', 'Romance'), ('Superhero', 'Superhero'), ('Sci-Fi', 'Sci-Fi'), ('Thriller', 'Thriller'), ('Supernatural', 'Supernatural'), ('Mystery', 'Mystery'), ('Sports', 'Sports'), ('Historical', 'Historical'), ('Heartwarming', 'Heartwarming'), ('Horror', 'Horror'), ('Informative', 'Informative')], max_length=18, null=True)),
                ('secondary_Genre', models.CharField(blank=True, choices=[('Select', 'Select'), ('Action', 'Action'), ('Drama', 'Drama'), ('Comedy', 'Comedy'), ('Fantasy', 'Fantasy'), ('Slice of Life', 'Slice of Life'), ('Romance', 'Romance'), ('Superhero', 'Superhero'), ('Sci-Fi', 'Sci-Fi'), ('Thriller', 'Thriller'), ('Supernatural', 'Supernatural'), ('Mystery', 'Mystery'), ('Sports', 'Sports'), ('Historical', 'Historical'), ('Heartwarming', 'Heartwarming'), ('Horror', 'Horror'), ('Informative', 'Informative')], max_length=18, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.creator')),
            ],
        ),
        migrations.CreateModel(
            name='OneShot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('cover_picture', models.ImageField(blank=True, upload_to='coverpictures/')),
                ('plot', models.CharField(max_length=1000)),
                ('primary_Genre', models.CharField(blank=True, choices=[('Select', 'Select'), ('Action', 'Action'), ('Drama', 'Drama'), ('Comedy', 'Comedy'), ('Fantasy', 'Fantasy'), ('Slice of Life', 'Slice of Life'), ('Romance', 'Romance'), ('Superhero', 'Superhero'), ('Sci-Fi', 'Sci-Fi'), ('Thriller', 'Thriller'), ('Supernatural', 'Supernatural'), ('Mystery', 'Mystery'), ('Sports', 'Sports'), ('Historical', 'Historical'), ('Heartwarming', 'Heartwarming'), ('Horror', 'Horror'), ('Informative', 'Informative')], max_length=18, null=True)),
                ('secondary_Genre', models.CharField(blank=True, choices=[('Select', 'Select'), ('Action', 'Action'), ('Drama', 'Drama'), ('Comedy', 'Comedy'), ('Fantasy', 'Fantasy'), ('Slice of Life', 'Slice of Life'), ('Romance', 'Romance'), ('Superhero', 'Superhero'), ('Sci-Fi', 'Sci-Fi'), ('Thriller', 'Thriller'), ('Supernatural', 'Supernatural'), ('Mystery', 'Mystery'), ('Sports', 'Sports'), ('Historical', 'Historical'), ('Heartwarming', 'Heartwarming'), ('Horror', 'Horror'), ('Informative', 'Informative')], max_length=18, null=True)),
                ('published', models.DateField(default=django.utils.timezone.now)),
                ('views', models.IntegerField(default=0)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.creator')),
            ],
        ),
        migrations.CreateModel(
            name='OneShotComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=500)),
                ('like', models.IntegerField(default=0)),
                ('dislike', models.IntegerField(default=0)),
                ('oneshot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.oneshot')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('paypal', models.CharField(max_length=10000)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Failed', 'Failed'), ('Succeeded', 'Succeeded')], max_length=10)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mangaseries')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReportOneShot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.CharField(max_length=1000)),
                ('oneshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.oneshot')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReportChapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.CharField(max_length=1000)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.chapter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, default='static/static/vol/web/media/img/no_profile_picture.png', null=True, upload_to='profilepictures/')),
                ('is_full_name_displayed', models.BooleanField(default=True)),
                ('bio', models.CharField(blank=True, max_length=500, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('advertise', models.BooleanField(default=False)),
                ('coins', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OneShotRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.BooleanField(null=True)),
                ('oneshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.oneshot')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OneShotImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, max_length=1000, upload_to=netmanga_website.apps.accounts.models.get_oneshot_image_filename)),
                ('no', models.IntegerField(null=True)),
                ('oneshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.oneshot')),
            ],
        ),
        migrations.CreateModel(
            name='OneShotCommentRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.BooleanField(null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.oneshotcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OneShotAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.award')),
                ('oneshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.oneshot')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CoinPurchaseOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('amount', models.IntegerField(default=0)),
                ('date_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.BooleanField(null=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.chapter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, max_length=1000, upload_to=netmanga_website.apps.accounts.models.get_chapter_image_filename)),
                ('no', models.IntegerField(null=True)),
                ('views', models.IntegerField(default=0)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.chapter')),
            ],
        ),
        migrations.CreateModel(
            name='ChapterCommentRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.BooleanField(null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.chaptercomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.award')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.chapter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='manga',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mangaseries'),
        ),
    ]
